

// Given a boolean matrix mat[M][N] of size M X N, modify it such that if a matrix cell mat[i][j] is 1 (or true) then make all the cells of ith row and jth column as 1.
// Time complexity is O(m*n) and space complexity is O(m+n)...we can improve this ...


import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		int[][] a = {{1,0,0,1}, {0,0,1,0}, {0,0,0,0} } ;
		int R = 3, C = 4;
		int i, j;
		int[] row = new int[R];
		int[] col = new int[C];
		for(i =0; i< R; i++){
		    row[i] = 0;
		}
		for(i = 0; i<C; i++){
		    col[i] = 0;
		}
		
		
		for(i=0;i<R;i++){
		    for(j=0;j<C;j++){
		        if(a[i][j] == 1){
		            row[i] = 1;
		            col[j] = 1;
		        }
		    }
		}
		
		for(i=0;i<R;i++){
		    for(j=0;j<C;j++){
		       if(row[i] == 1 || col[j] ==1){
		           a[i][j] = 1;
		           
		       }
		    }
		}
		//for printing the ResultantMatrix
		
		for(i=0;i<R;i++){
		    for(j=0;j<C;j++){
		
		System.out.print(a[i][j]+" ");
		
		    }
		    System.out.println();
		}
	}
}
